;; Globals...
(defvar *num-high* 9)
(defvar *num-wide* 9)
(defvar *button-side* 20)
(defvar *width* (* *num-wide* *button-side*))
(defvar *height* (* *num-high* *button-side*))
(defparameter *board* '())
(defvar *alive* t)
(defvar *ttf-path* (or *load-truename* *default-pathname-defaults*))
(defvar *small-font* nil)

(defun draw-clear-animation(x y)
  (let ((x1 (* x *button-side*)) (y1 (* y *button-side*)))
  (sdl:with-color (#(100 100 100))
    (sdl-gfx:draw-box (sdl:rectangle x1 y1 *button-side* *button-side*)))))

(defun draw-empty-animation(x y)
  (let ((x1 (* x *button-side*)) (y1 (* y *button-side*)))
  (sdl:with-color (#(0 0 0))
    (sdl-gfx:draw-box (sdl:rectangle x1 y1 *button-side* *button-side*)))))

(defun draw-mark-animation(x y)
  (let ((x1 (* x *button-side*)) (y1 (* y *button-side*)))
  (sdl:with-color (#(255 255 255))
    (sdl-gfx:draw-box (sdl:rectangle x1 y1 *button-side* *button-side*)))))

(defun draw-hit-mine-animation (x y)
  (let ((x1 (* x *button-side*)) (y1 (* y *button-side*)))
  (sdl:with-color (#(255 0 0))
    (sdl-gfx:draw-box (sdl:rectangle x1 y1 *button-side* *button-side*)))))

(defun draw-end-game-animation ()
  (sdl:with-color (#(255 0 0))
    (sdl-gfx:draw-line (sdl:point 0 0) (sdl:point *width* *height*))
    (sdl-gfx:draw-line (sdl:point *width* 0) (sdl:point 0 *height*))))

(defun loop-over-board (fn)
  ;; This section draws our current state.
  (do ((row 0 (+ 1 row)))
      ((= row *num-high*) nil)
    (do ((col 0 (+ 1 col)))
	((= col *num-wide*) nil)
      (let ((cell (nth col (nth row *board*))))
	(funcall fn col row cell)))))

(defun draw-board ()
  (loop-over-board #'(lambda (col row cell)
		       (cond
			 ((getf cell :marked)
			   (draw-mark-animation col row))
			 ((getf cell :cleared)
			   (progn
			     (if (getf cell :mined)
				 (draw-hit-mine-animation col row)
				 (progn 
				   (draw-clear-animation col row)
				   (if (> (getf cell :num-around) 0)
				       ;;(sdl-ttf:with-open-font ("Vera.ttf" 16 *ttf-path*)
				       ;;(sdl-ttf:render-font-solid (format nil "~d" (getf cell :num-around)) :position (vector (* col *button-side*) (* row *button-side*)) :update-p t)))))))))
				       (sdl-simple-font:draw-string sdl:*default-display* *small-font* (sdl:point (+ (/ *button-side* 2) (* col *button-side*)) (+ (/ *button-side* 2) (* row *button-side*))) (format nil "~d" (getf cell :num-around))))))))
		       (t (draw-empty-animation col row)))))
  (if (not *alive*) (draw-end-game-animation))

  ;; This section draws the grid lines.
  (let ((col 0))
  (dotimes (i *num-high*)
    (sdl:with-color (#(226 226 226))
      (sdl-gfx:draw-line (sdl:point col 0) (sdl:point col *height*)))
    (setf col (+ col *button-side*))))
  (let ((row 0))
  (dotimes (i *num-wide*)
    (sdl:with-color (#(226 226 226))
      (sdl-gfx:draw-line (sdl:point 0 row) (sdl:point *width* row)))
    (setf row (+ row *button-side*))))
)

(defun erase-board ()
  (sdl:with-color (#(0 0 0))
    (sdl-gfx:draw-box (sdl:rectangle 0 0 *width* *height*))))

(defun setup-board ()
  (setq *board* nil)
  (dotimes (i *num-high*)
    (let ((row '()))
      (dotimes (j *num-wide*)
        (push (list :mined nil :num-around 0 :cleared nil :marked nil) row))
      (push row *board*)))
  (do ((row (random 9) (random 9))
       (col (random 9) (random 9))
       (num-mines 0))
      ((= num-mines 10) nil)
    (let* (
	   (cell (nth col (nth row *board*)))
	   (is-mined (getf cell :mined))
	  )
      (if (not is-mined)
	(progn
	  (setf (getf cell :mined) t)
	  (setq num-mines (+ 1 num-mines))))))
  (loop-over-board #'(lambda (col row cell)
		       (if (not (getf cell :mined)) (setf (getf cell :num-around) (get-num-around col row))))))

(defun mined? (col row)
  (getf (nth col (nth row *board*)) :mined))

(defun clear-cell (col row)
  (setf (getf (nth col (nth row *board*)) :cleared) t)
  (if (and (not (mined? col row)) (= 0 (getf (nth col (nth row *board*)) :num-around)))
      (on-around col row 
		 #'(lambda (x y)
		     (and
		      (not (getf (nth x (nth y *board*)) :mined))
		      (not (getf (nth x (nth y *board*)) :cleared))))
		 #'(lambda (x y)
		     (clear-cell x y)))))

(defun mark-cell (col row)
  (let ((cell (nth col (nth row *board*))))
    (if (getf cell :marked)
	(setf (getf (nth col (nth row *board*)) :marked) nil)
	(setf (getf (nth col (nth row *board*)) :marked) t))))

(defun on-around (col row predicate what-to-do)
  (let ((check-and-perform 
	 #'(lambda (x y)
	     (cond
	       ((or (< x 0) (< y 0) (>= x *num-wide*) (>= y *num-high*)) nil)
	       ((if (funcall predicate x y) (funcall what-to-do x y)))))))
  (funcall check-and-perform col       (+ row 1))
  (funcall check-and-perform (+ col 1) (+ row 1))
  (funcall check-and-perform (- col 1) (+ row 1))
  (funcall check-and-perform (+ col 1) row)
  (funcall check-and-perform (- col 1) row)
  (funcall check-and-perform col       (- row 1))
  (funcall check-and-perform (+ col 1) (- row 1))
  (funcall check-and-perform (- col 1) (- row 1))
))

(defun get-num-around (col row)
  (let ((num 0))
    (on-around col row 'mined? #'(lambda (x y) (progn (+ x y) (setf num (+ 1 num)))))
  num))

(defun *button-up-handler* (button x y)
  (let* ((col (floor x *button-side*)) (row (floor y *button-side*)))
    (cond
      ((= button 1) (progn (clear-cell col row)
		     (if (mined? col row)
			 (setq *alive* nil))))
       ((= button 3) (mark-cell col row)))))

(defun pprint-board ()
  (loop-over-board #'(lambda (col row cell)
		       row
		       (if (getf cell :mined)
			   (format t "~A " "*")
			   (format t "~A " (getf cell :num-around)))
		       (if (= col 8) (format t "~%")))))
(defun main ()
  (setup-board)
  (sdl:set-framerate 5)
   (sdl:with-init()
    (sdl:with-display (*width* *height* :title-caption "JRB Minesweeper")
	  (setq *small-font* (sdl-simple-font:initialise-font (namestring "c:/clisp-2.39/font.bmp") 4 5 
	     "abcdefghijklmnopqrstuvwxyz:'!?_-,.()#~0123456789" #(99 0 0)))
      (sdl:with-events ()
         (:idle ()
		(draw-board)
		(sdl:update-display))
	 (:mousebuttonup (:button button :x x :y y)
			 (if *alive*
			     (*button-up-handler* button x y)))
	 (:keydown (:key key)
		   (cond
		     ((sdl:key= key :SDLK_ESCAPE) 
		      (progn 
			(erase-board)
			(setup-board)
			(setq *alive* t)
			(draw-board)))))
         (:quit () t))))
   (sdl-simple-font:close-font *small-font*)
   ;;(ext:exit)
)
;;(setup-board)
(main)
;;(pprint-board)
;;(ext:saveinitmem "ms.exe" :init-function 'main :executable t :quiet t)
;;(sdl:clear-display :color #(0 0 0))
;;(sdl:with-color (#(226 226 226))
    ;;(sdl-gfx:draw-box (sdl:rectangle 45 45 35 35)))
;;swank:*use-dedicated-output-stream nil
